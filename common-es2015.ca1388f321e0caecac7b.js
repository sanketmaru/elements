(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{v1P6:function(e,t,r){"use strict";r.d(t,"a",function(){return i}),r("jrat");const n="@angular-extensions/elements";class i{constructor(e,t,r,n,i){this.vcr=e,this.template=t,this.elementsLoaderService=r,this.cfr=n,this.cdr=i}ngOnInit(){if(!this.tag||0===this.tag.length||!this.tag.includes("-"))throw new Error(`${n} - Valid tag has to be specified when using *axLazyElementDynamic directive (use *axLazyElementDynamic="'some-tag'"), got: "${this.tag}"`);const e=this.elementsLoaderService.getElementConfig(this.tag)||{},t=this.elementsLoaderService.options,r=e.loadingComponent||t.loadingComponent;if(this.loadingTemplateRef)this.vcr.createEmbeddedView(this.loadingTemplateRef);else if(r){const e=this.cfr.resolveComponentFactory(r);this.vcr.createComponent(e)}this.elementsLoaderService.loadElement(this.url,this.tag,this.isModule).then(()=>{if(this.template._declarationTContainer)throw new Error("The *axLazyElementDynamic directive is currently does NOT support Angular Ivy, please use standard *axLazyElement directive instead!");this.template._def.element.template.nodes[0].element.name=this.tag,this.vcr.clear(),this.vcr.createEmbeddedView(this.template),this.cdr.markForCheck()}).catch(r=>{const i=e.errorComponent||t.errorComponent;if(this.vcr.clear(),this.errorTemplateRef)this.vcr.createEmbeddedView(this.errorTemplateRef),this.cdr.markForCheck();else if(i){const e=this.cfr.resolveComponentFactory(i);this.vcr.createComponent(e),this.cdr.markForCheck()}else console.error(`${n} - Loading of element <${this.tag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElementDynamic="errorTemplate: error" to display customized error message in place of element\n\n`,r)})}}},wIh0:function(e,t,r){"use strict";r.d(t,"a",function(){return i}),r("jrat");const n="@angular-extensions/elements";class i{constructor(e,t,r,n,i){this.vcr=e,this.template=t,this.elementsLoaderService=r,this.cfr=n,this.cdr=i}ngOnInit(){const e=this.template,t=e._declarationTContainer?e._declarationTContainer.tagName:e._def.element.template.nodes[0].element.name,r=this.elementsLoaderService.getElementConfig(t)||{},i=this.elementsLoaderService.options,o=r.loadingComponent||i.loadingComponent;if(this.loadingTemplateRef)this.vcr.createEmbeddedView(this.loadingTemplateRef);else if(o){const e=this.cfr.resolveComponentFactory(o);this.vcr.createComponent(e)}this.elementsLoaderService.loadElement(this.url,t,this.isModule).then(()=>{this.vcr.clear(),this.vcr.createEmbeddedView(this.template),this.cdr.markForCheck()}).catch(()=>{this.vcr.clear();const e=r.errorComponent||i.errorComponent;if(this.errorTemplateRef)this.vcr.createEmbeddedView(this.errorTemplateRef),this.cdr.markForCheck();else if(e){const t=this.cfr.resolveComponentFactory(e);this.vcr.createComponent(t),this.cdr.markForCheck()}else console.error(`${n} - Loading of element <${t}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement="errorTemplate: error" to display customized error message in place of element`)})}}}}]);